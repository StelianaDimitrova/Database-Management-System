SET SCHEMA FN4MI0700044;

CREATE OR REPLACE PROCEDURE P_NEW_PRICE_AFTER_2020()
BEGIN
    DECLARE V_MODEL VARCHAR(30);
    DECLARE V_YEAR INT;
    DECLARE V_PRICE DECIMAL(9,2);
    DECLARE V_NAME VARCHAR(50);
    DECLARE V_PHONE_NUMBER CHAR(10);
    DECLARE SQLCODE INT;

    DECLARE C1 CURSOR WITH RETURN FOR SELECT A.MODEL, A.YEAR_OF_MANUFACTURE, R.PRICE, C.NAME, A.CUSTOMER_PHONE_NUMBER
                                        FROM APPLIANCE A, REPAIR R, CUSTOMER C
                                        WHERE A.CUSTOMER_PHONE_NUMBER = C.PHONE_NUMBER
                                        AND R.APPLIANCE_ID = A.APPLIANCE_ID;

    OPEN C1;
    FETCH C1 INTO V_MODEL, V_YEAR, V_PRICE, V_NAME, V_PHONE_NUMBER;

    WHILE SQLCODE = 0 DO
        IF V_YEAR > 2020 THEN
            SET V_PRICE = V_PRICE * 1.2;

            CALL DBMS_OUTPUT.PUT_LINE('Model - ' || V_MODEL || ', Price of repair - ' || V_PRICE);
            CALL DBMS_OUTPUT.PUT_LINE('Notify ' || V_NAME || ',whose phone number is ' || V_PHONE_NUMBER || ', that the price is going up because of the new model.');
            CALL DBMS_OUTPUT.PUT_LINE('---------------------------------------------------------------------------------------------------------------------------');

        END IF;

        FETCH C1 INTO V_MODEL, V_YEAR, V_PRICE, V_NAME, V_PHONE_NUMBER;
    END WHILE;

CLOSE C1;
END;

CALL FN4MI0700044.P_NEW_PRICE_AFTER_2020();



CREATE OR REPLACE PROCEDURE P_DAYS_OFF(IN P_NUMBER_OF_DAYS INT, IN P_FROM_DATE DATE, IN P_TECHNICIAN_ID INT, OUT P_NEW_DATE DATE)
BEGIN
    DECLARE V_MODEL VARCHAR(30);
    DECLARE V_DATE DATE;

    DECLARE SQLCODE INT;

    DECLARE C1 CURSOR WITH RETURN FOR SELECT A.MODEL, R.DATE
                                        FROM APPLIANCE A, REPAIR R
                                        WHERE R.TECHNICIAN_ID = P_TECHNICIAN_ID
                                        AND R.DATE >= P_FROM_DATE
                                        AND A.APPLIANCE_ID = R.APPLIANCE_ID;

    OPEN C1;
    FETCH C1 INTO V_MODEL, V_DATE;

    WHILE SQLCODE = 0 DO
        SET P_NEW_DATE = DATE(V_DATE) + P_NUMBER_OF_DAYS DAYS;

        CALL DBMS_OUTPUT.PUT_LINE(V_MODEL || ' will be ready on ' || P_NEW_DATE);

        FETCH C1 INTO V_MODEL, V_DATE;
    END WHILE;

CLOSE C1;
END;

BEGIN
    DECLARE NEW_DATE DATE;
    CALL FN4MI0700044.P_DAYS_OFF(20, '2023-03-01' , 141, NEW_DATE);
END;



CREATE OR REPLACE PROCEDURE P_TECHNICIAN_INFO(IN P_TECHNICIAN_ID INT)
BEGIN
    DECLARE V_NAME VARCHAR(100);
    DECLARE V_EGN CHAR(10);
    DECLARE V_CATEGORY VARCHAR(50);

    DECLARE V_ID_COLLECTION INT;
    DECLARE V_APP_COUNT INT;

    DECLARE r_error INT DEFAULT 0;
    DECLARE SQLCODE INT DEFAULT 0;
    DECLARE NOT_FOUND CONDITION FOR SQLSTATE '21000';

    DECLARE EXIT HANDLER FOR NOT_FOUND
    BEGIN
        SET r_error = SQLCODE;
        CALL DBMS_OUTPUT.PUT_LINE('ERROR OCCURS - TECHNICIAN IS NOT FOUND: ' || r_error);
    END;

    SELECT COUNT(*) INTO V_APP_COUNT
    FROM  REPAIR R
    WHERE R.TECHNICIAN_ID = P_TECHNICIAN_ID;

    SELECT COUNT(*) INTO V_ID_COLLECTION
    FROM TECHNICIAN
    WHERE TECHNICIAN_ID = P_TECHNICIAN_ID;

    IF(V_ID_COLLECTION = 0) THEN
        SIGNAL NOT_FOUND;
    ELSE
        SELECT NAME, EGN, TECHNICIAN_CATEGORY INTO V_NAME, V_EGN, V_CATEGORY
        FROM TECHNICIAN
        WHERE TECHNICIAN_ID = P_TECHNICIAN_ID;

        CALL DBMS_OUTPUT.PUT_LINE('TECHNICIAN NAME: ' || V_NAME);
        CALL DBMS_OUTPUT.PUT_LINE('TECHNICIAN EGN: ' || V_EGN);
        CALL DBMS_OUTPUT.PUT_LINE('TECHNICIAN ID: ' || P_TECHNICIAN_ID);
        CALL DBMS_OUTPUT.PUT_LINE('TECHNICIAN CATEGORY: ' || V_CATEGORY);
        CALL DBMS_OUTPUT.PUT_LINE('TECHNICAL REPAIRS: ' || V_APP_COUNT);
    END IF;

END;

CALL FN4MI0700044.P_TECHNICIAN_INFO( 141);
CALL FN4MI0700044.P_TECHNICIAN_INFO( 133);